import streamlit as st
import pandas as pd
import joblib
from sklearn.preprocessing import LabelEncoder
import requests
import time

# --- Streamlit Page Config ---
st.set_page_config(
    page_title="Smart Crop Recommendation System",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- API Configuration ---
OPENWEATHER_API_KEY = "649b57f4af88bbe329b17952ec27b162"

if not OPENWEATHER_API_KEY or len(OPENWEATHER_API_KEY) != 32:
    OPENWEATHER_API_KEY = None
    st.error("API ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§ó‡•Å‡§Æ ‡§π‡•à ‡§Ø‡§æ ‡§ó‡§≤‡§§ ‡§≤‡§Ç‡§¨‡§æ‡§à ‡§ï‡•Ä ‡§π‡•à‡•§ ‡§≤‡§æ‡§á‡§µ ‡§Æ‡•å‡§∏‡§Æ ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Å ‡§Ö‡§ï‡•ç‡§∑‡§Æ ‡§π‡•à‡§Ç‡•§")


# ==============================================================================
# --- 0. Multilanguage Translations (i18n) ---
# ==============================================================================

# Dictionary for translating the final CROP NAMES from English (ML output)
CROP_NAME_TRANSLATIONS = {
    'Banana': {'Hindi': '‡§ï‡•á‡§≤‡§æ', 'Marathi': '‡§ï‡•á‡§≥‡•Ä'},
    'Chickpea': {'Hindi': '‡§ö‡§®‡§æ', 'Marathi': '‡§ö‡§£‡§æ'},
    'Mungbean': {'Hindi': '‡§Æ‡•Ç‡§Ç‡§ó', 'Marathi': '‡§Æ‡•Ç‡§ó'},
    'Apple': {'Hindi': '‡§∏‡•á‡§¨', 'Marathi': '‡§∏‡§´‡§∞‡§ö‡§Ç‡§¶'},
    'Cotton': {'Hindi': '‡§ï‡§™‡§æ‡§∏', 'Marathi': '‡§ï‡§æ‡§™‡•Ç‡§∏'},
    'Mothbeans': {'Hindi': '‡§Æ‡•ã‡§†', 'Marathi': '‡§Æ‡§†'},
    'Grapes': {'Hindi': '‡§Ö‡§Ç‡§ó‡•Ç‡§∞', 'Marathi': '‡§¶‡•ç‡§∞‡§æ‡§ï‡•ç‡§∑‡•á'},
    'Mango': {'Hindi': '‡§Ü‡§Æ', 'Marathi': '‡§Ü‡§Ç‡§¨‡§æ'},
    'Coconut': {'Hindi': '‡§®‡§æ‡§∞‡§ø‡§Ø‡§≤', 'Marathi': '‡§®‡§æ‡§∞‡§≥'},
    'Jute': {'Hindi': '‡§ú‡•Ç‡§ü', 'Marathi': '‡§§‡§æ‡§ó'},
    'Lentil': {'Hindi': '‡§Æ‡§∏‡•Ç‡§∞', 'Marathi': '‡§Æ‡§∏‡•Ç‡§∞'},
    'Blackgram': {'Hindi': '‡§â‡§°‡§º‡§¶', 'Marathi': '‡§â‡§°‡•Ä‡§¶'},
    'Coffee': {'Hindi': '‡§ï‡•â‡§´‡•Ä', 'Marathi': '‡§ï‡•â‡§´‡•Ä'},
    'Kidneybeans': {'Hindi': '‡§∞‡§æ‡§ú‡§Æ‡§æ', 'Marathi': '‡§∞‡§æ‡§ú‡§Æ‡§æ'},
    'Maize': {'Hindi': '‡§Æ‡§ï‡•ç‡§ï‡§æ', 'Marathi': '‡§Æ‡§ï‡§æ'}
}

# Dictionary for translating the descriptive TIME STRINGS (NEW FIX)
TIME_DETAILS_TRANSLATIONS = {
    "Feb - May or July - Aug (Planting)": {"Hindi": "‡§´‡§∞‡§µ‡§∞‡•Ä - ‡§Æ‡§à ‡§Ø‡§æ ‡§ú‡•Å‡§≤‡§æ‡§à - ‡§Ö‡§ó‡§∏‡•ç‡§§ (‡§∞‡•ã‡§™‡§£)", "Marathi": "‡§´‡•á‡§¨‡•ç‡§∞‡•Å‡§µ‡§æ‡§∞‡•Ä - ‡§Æ‡•á ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ú‡•Å‡§≤‡•à - ‡§ë‡§ó‡§∏‡•ç‡§ü (‡§≤‡§æ‡§ó‡§µ‡§°)"},
    "October - November (Rabi)": {"Hindi": "‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ - ‡§®‡§µ‡§Ç‡§¨‡§∞ (‡§∞‡§¨‡•Ä)", "Marathi": "‡§ë‡§ï‡•ç‡§ü‡•ã‡§¨‡§∞ - ‡§®‡•ã‡§µ‡•ç‡§π‡•á‡§Ç‡§¨‡§∞ (‡§∞‡§¨‡•ç‡§¨‡•Ä)"},
    "June - July (Kharif)": {"Hindi": "‡§ú‡•Ç‡§® - ‡§ú‡•Å‡§≤‡§æ‡§à (‡§ñ‡§∞‡•Ä‡§´)", "Marathi": "‡§ú‡•Ç‡§® - ‡§ú‡•Å‡§≤‡•à (‡§ñ‡§∞‡•Ä‡§™)"},
    "Dec - Feb (Dormant season)": {"Hindi": "‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞ - ‡§´‡§∞‡§µ‡§∞‡•Ä (‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§Æ‡•å‡§∏‡§Æ)", "Marathi": "‡§°‡§ø‡§∏‡•á‡§Ç‡§¨‡§∞ - ‡§´‡•á‡§¨‡•ç‡§∞‡•Å‡§µ‡§æ‡§∞‡•Ä (‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡§Ç‡§ó‡§æ‡§Æ)"},
    "June - September (Kharif)": {"Hindi": "‡§ú‡•Ç‡§® - ‡§∏‡§ø‡§§‡§Ç‡§¨‡§∞ (‡§ñ‡§∞‡•Ä‡§´)", "Marathi": "‡§ú‡•Ç‡§® - ‡§∏‡§™‡•ç‡§ü‡•á‡§Ç‡§¨‡§∞ (‡§ñ‡§∞‡•Ä‡§™)"},
    "Dec - Jan (Planting)": {"Hindi": "‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞ - ‡§ú‡§®‡§µ‡§∞‡•Ä (‡§∞‡•ã‡§™‡§£)", "Marathi": "‡§°‡§ø‡§∏‡•á‡§Ç‡§¨‡§∞ - ‡§ú‡§æ‡§®‡•á‡§µ‡§æ‡§∞‡•Ä (‡§≤‡§æ‡§ó‡§µ‡§°)"},
    "July - August (Planting)": {"Hindi": "‡§ú‡•Å‡§≤‡§æ‡§à - ‡§Ö‡§ó‡§∏‡•ç‡§§ (‡§∞‡•ã‡§™‡§£)", "Marathi": "‡§ú‡•Å‡§≤‡•à - ‡§ë‡§ó‡§∏‡•ç‡§ü (‡§≤‡§æ‡§ó‡§µ‡§°)"},
    "June - July (Planting)": {"Hindi": "‡§ú‡•Ç‡§® - ‡§ú‡•Å‡§≤‡•à (‡§∞‡•ã‡§™‡§£)", "Marathi": "‡§ú‡•Ç‡§® - ‡§ú‡•Å‡§≤‡•à (‡§≤‡§æ‡§ó‡§µ‡§°)"},
    "March - July (Monsoon)": {"Hindi": "‡§Æ‡§æ‡§∞‡•ç‡§ö - ‡§ú‡•Å‡§≤‡§æ‡§à (‡§Æ‡§æ‡§®‡§∏‡•Ç‡§®)", "Marathi": "‡§Æ‡§æ‡§∞‡•ç‡§ö - ‡§ú‡•Å‡§≤‡•à (‡§Æ‡§æ‡§®‡•ç‡§∏‡•Ç‡§®)"},
    "June - July (Monsoon/Main planting)": {"Hindi": "‡§ú‡•Ç‡§® - ‡§ú‡•Å‡§≤‡§æ‡§à (‡§Æ‡§æ‡§®‡§∏‡•Ç‡§®/‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∞‡•ã‡§™‡§£)", "Marathi": "‡§ú‡•Ç‡§® - ‡§ú‡•Å‡§≤‡•à (‡§Æ‡§æ‡§®‡•ç‡§∏‡•Ç‡§®/‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§≤‡§æ‡§ó‡§µ‡§°)"},
    "Oct - Nov (Rabi) or Feb-Mar (Zaid)": {"Hindi": "‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ - ‡§®‡§µ‡§Ç‡§¨‡§∞ (‡§∞‡§¨‡•Ä) ‡§Ø‡§æ ‡§´‡§∞‡§µ‡§∞‡•Ä - ‡§Æ‡§æ‡§∞‡•ç‡§ö (‡§ú‡§æ‡§Ø‡§¶)", "Marathi": "‡§ë‡§ï‡•ç‡§ü‡•ã‡§¨‡§∞ - ‡§®‡•ã‡§µ‡•ç‡§π‡•á‡§Ç‡§¨‡§∞ (‡§∞‡§¨‡•ç‡§¨‡•Ä) ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§´‡•á‡§¨‡•ç‡§∞‡•Å‡§µ‡§æ‡§∞‡•Ä - ‡§Æ‡§æ‡§∞‡•ç‡§ö (‡§ú‡§æ‡§Ø‡§¶)"},
    "11 - 15 months": {"Hindi": "11 - 15 ‡§Æ‡§π‡•Ä‡§®‡•á", "Marathi": "11 - 15 ‡§Æ‡§π‡§ø‡§®‡•á"},
    "4 - 5 months": {"Hindi": "4 - 5 ‡§Æ‡§π‡•Ä‡§®‡•á", "Marathi": "4 - 5 ‡§Æ‡§π‡§ø‡§®‡•á"},
    "2 - 3 months": {"Hindi": "2 - 3 ‡§Æ‡§π‡•Ä‡§®‡•á", "Marathi": "2 - 3 ‡§Æ‡§π‡§ø‡§®‡•á"},
    "Perennial (Tree)": {"Hindi": "‡§¨‡§æ‡§∞‡§π‡§Æ‡§æ‡§∏‡•Ä (‡§µ‡•É‡§ï‡•ç‡§∑)", "Marathi": "‡§¨‡§æ‡§∞‡§Æ‡§æ‡§π‡•Ä (‡§ù‡§æ‡§°)"},
    "5 - 6 months": {"Hindi": "5 - 6 ‡§Æ‡§π‡•Ä‡§®‡•á", "Marathi": "5 - 6 ‡§Æ‡§π‡§ø‡§®‡•á"},
    "Perennial (Vine)": {"Hindi": "‡§¨‡§æ‡§∞‡§π‡§Æ‡§æ‡§∏‡•Ä (‡§¨‡•á‡§≤)", "Marathi": "‡§¨‡§æ‡§∞‡§Æ‡§æ‡§π‡•Ä (‡§µ‡•á‡§≤)"},
    "Perennial (Shrub)": {"Hindi": "‡§¨‡§æ‡§∞‡§π‡§Æ‡§æ‡§∏‡•Ä (‡§ù‡§æ‡§°‡§º‡•Ä)", "Marathi": "‡§¨‡§æ‡§∞‡§Æ‡§æ‡§π‡•Ä (‡§ù‡•Å‡§°‡•Ç‡§™)"},
    "3 - 5 months": {"Hindi": "3 - 5 ‡§Æ‡§π‡•Ä‡§®‡•á", "Marathi": "3 - 5 ‡§Æ‡§π‡§ø‡§®‡•á"},
    "3 - 4 months": {"Hindi": "3 - 4 ‡§Æ‡§π‡•Ä‡§®‡•á", "Marathi": "3 - 4 ‡§Æ‡§π‡§ø‡§®‡•á"},
    "Throughout the year": {"Hindi": "‡§∏‡§æ‡§≤ ‡§≠‡§∞", "Marathi": "‡§µ‡§∞‡•ç‡§∑‡§≠‡§∞"},
    "March (Spring)": {"Hindi": "‡§Æ‡§æ‡§∞‡•ç‡§ö (‡§µ‡§∏‡§Ç‡§§)", "Marathi": "‡§Æ‡§æ‡§∞‡•ç‡§ö (‡§µ‡§∏‡§Ç‡§§)"},
    "September - October (Autumn)": {"Hindi": "‡§∏‡§ø‡§§‡§Ç‡§¨‡§∞ - ‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ (‡§∂‡§∞‡§¶ ‡§ã‡§§‡•Å)", "Marathi": "‡§∏‡§™‡•ç‡§ü‡•á‡§Ç‡§¨‡§∞ - ‡§ë‡§ï‡•ç‡§ü‡•ã‡§¨‡§∞ (‡§∂‡§∞‡§¶ ‡§ã‡§§‡•Ç)"},
    "July - September": {"Hindi": "‡§ú‡•Å‡§≤‡§æ‡§à - ‡§∏‡§ø‡§§‡§Ç‡§¨‡§∞", "Marathi": "‡§ú‡•Å‡§≤‡•à - ‡§∏‡§™‡•ç‡§ü‡•á‡§Ç‡§¨‡§∞"},
    "December - February": {"Hindi": "‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞ - ‡§´‡§∞‡§µ‡§∞‡•Ä", "Marathi": "‡§°‡§ø‡§∏‡•á‡§Ç‡§¨‡§∞ - ‡§´‡•á‡§¨‡•ç‡§∞‡•Å‡§µ‡§æ‡§∞‡•Ä"},
    "Feb - May": {"Hindi": "‡§´‡§∞‡§µ‡§∞‡•Ä - ‡§Æ‡§à", "Marathi": "‡§´‡•á‡§¨‡•ç‡§∞‡•Å‡§µ‡§æ‡§∞‡•Ä - ‡§Æ‡•á"},
    "February - June": {"Hindi": "‡§´‡§∞‡§µ‡§∞‡•Ä - ‡§ú‡•Ç‡§®", "Marathi": "‡§´‡•á‡§¨‡•ç‡§∞‡•Å‡§µ‡§æ‡§∞‡•Ä - ‡§ú‡•Ç‡§®"},
    "Year-round (Multiple harvests)": {"Hindi": "‡§∏‡§æ‡§≤ ‡§≠‡§∞ (‡§ï‡§à ‡§´‡§∏‡§≤‡•á‡§Ç)", "Marathi": "‡§µ‡§∞‡•ç‡§∑‡§≠‡§∞ (‡§è‡§ï‡§æ‡§ß‡§ø‡§ï ‡§ï‡§æ‡§™‡§£‡•Ä)"},
    "July - October (Autumn)": {"Hindi": "‡§ú‡•Å‡§≤‡§æ‡§à - ‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ (‡§∂‡§∞‡§¶ ‡§ã‡§§‡•Å)", "Marathi": "‡§ú‡•Å‡§≤‡•à - ‡§ë‡§ï‡•ç‡§ü‡•ã‡§¨‡§∞ (‡§∂‡§∞‡§¶ ‡§ã‡§§‡•Ç)"},
    "February - April (Spring)": {"Hindi": "‡§´‡§∞‡§µ‡§∞‡•Ä - ‡§Ö‡§™‡•ç‡§∞‡•à‡§≤ (‡§µ‡§∏‡§Ç‡§§)", "Marathi": "‡§´‡•á‡§¨‡•ç‡§∞‡•Å‡§µ‡§æ‡§∞‡•Ä - ‡§è‡§™‡•ç‡§∞‡§ø‡§≤ (‡§µ‡§∏‡§Ç‡§§)"},
    "November - March (Main Harvest)": {"Hindi": "‡§®‡§µ‡§Ç‡§¨‡§∞ - ‡§Æ‡§æ‡§∞‡•ç‡§ö (‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡§ü‡§æ‡§à)", "Marathi": "‡§®‡•ã‡§µ‡•ç‡§π‡•á‡§Ç‡§¨‡§∞ - ‡§Æ‡§æ‡§∞‡•ç‡§ö (‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡§æ‡§™‡§£‡•Ä)"},
    "March - May (Spring/Early Summer)": {"Hindi": "‡§Æ‡§æ‡§∞‡•ç‡§ö - ‡§Æ‡§à (‡§µ‡§∏‡§Ç‡§§/‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§ó‡§∞‡•ç‡§Æ‡•Ä)", "Marathi": "‡§Æ‡§æ‡§∞‡•ç‡§ö - ‡§Æ‡•á (‡§µ‡§∏‡§Ç‡§§/‡§≤‡§µ‡§ï‡§∞ ‡§â‡§®‡•ç‡§π‡§æ‡§≥‡§æ)"}
}


LANGUAGES = {
    'English': {
        'code': 'English', 
        'title': "üå± Smart Crop Recommendation System",
        'intro': "Enter your soil and climate parameters below. The recommendation engine uses these values to predict the best crop.",
        'sidebar_header': "Soil & Climate Parameters",
        'weather_subheader': "Live Weather Fetch (Auto)",
        'city_label': "City Name (e.g., Pune)",
        'n_label': "Nitrogen (N) kg/ha",
        'p_label': "Phosphorous (P) kg/ha",
        'k_label': "Potassium (K) kg/ha",
        'temp_label': "Current Temperature (¬∞C)",
        'hum_label': "Current Humidity (%)",
        'ph_label': "Soil pH",
        'rain_label': "Rainfall (mm) - Long-term Avg",
        'soil_subheader': "Soil Type (Must Match ML Model)",
        'soil_label': "Select Soil Type",
        'soil_types': ["Alluvial", "Black (Regur)", "Red & Yellow", "Laterite", "Arid (Desert)", "Forest / Mountain", "Saline / Alkaline", "Peaty / Marshy"],
        'loc_subheader': "Location Data (Optional)",
        'lat_label': "Latitude",
        'lon_label': "Longitude",
        'button_text': "Recommend Crop",
        'rec_header': "Optimal Crop Recommended:",
        'rec_base_text': "Based on the provided soil and climate conditions, <b>{}</b> is the most suitable crop.",
        'time_subheader': "üóìÔ∏è Best Time Details",
        'sowing_time': "Best Sowing Time",
        'duration_time': "Duration Time (Approx.)",
        'harvest_time': "Harvesting Time",
        'note': "Note: This recommendation is based on a machine learning model trained on the provided dataset and real-time/default climate data. **The ML Model MUST be retrained to include the Soil Type feature.**",
        'error_model': "Error: 'model.pkl' not found. Please run the model training notebook first.",
        'error_map': "Error: 'Crop_data.csv' not found. Please ensure it exists in the project folder to get crop details.", 
        'error_pred': "Prediction failed: {}",
        'info_pred': "Ensure your 'model.pkl' and 'Crop_data.csv' files are correctly set up.",
        'unknown_crop': "Unknown Crop",
        'not_available': "Not available in current data.",
        'live_weather_success': "‚úÖ Live data fetched! Temperature: **{temp:.1f}¬∞C** and Humidity: **{hum}%**.",
        'live_weather_error': "‚ùå Could not fetch live data. Using manual **{temp:.1f}¬∞C** / **{hum:.0f}%**. Error: {error}",
        'weather_disabled': "Live weather features disabled.",
    },
    '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä (Hindi)': {
        'code': 'Hindi',
        'title': "üå± ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä",
        'intro': "‡§Ö‡§™‡§®‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§î‡§∞ ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§™‡•à‡§∞‡§æ‡§Æ‡•Ä‡§ü‡§∞ ‡§®‡•Ä‡§ö‡•á ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§á‡§Ç‡§ú‡§® ‡§á‡§® ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§",
        'sidebar_header': "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§î‡§∞ ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§™‡•à‡§∞‡§æ‡§Æ‡•Ä‡§ü‡§∞",
        'weather_subheader': "‡§≤‡§æ‡§á‡§µ ‡§Æ‡•å‡§∏‡§Æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç (‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§)",
        'city_label': "‡§∂‡§π‡§∞ ‡§ï‡§æ ‡§®‡§æ‡§Æ (‡§ú‡•à‡§∏‡•á, ‡§™‡•Å‡§£‡•á)",
        'n_label': "‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® (N) ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞",
        'p_label': "‡§´‡§æ‡§∏‡•ç‡§´‡•ã‡§∞‡§∏ (P) ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞",
        'k_label': "‡§™‡•ã‡§ü‡•á‡§∂‡§ø‡§Ø‡§Æ (K) ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞",
        'temp_label': "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§§‡§æ‡§™‡§Æ‡§æ‡§® (¬∞C)",
        'hum_label': "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§®‡§Æ‡•Ä (%)",
        'ph_label': "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•Ä‡§è‡§ö (pH)",
        'rain_label': "‡§µ‡§∞‡•ç‡§∑‡§æ (‡§Æ‡§ø‡§Æ‡•Ä) - ‡§¶‡•Ä‡§∞‡•ç‡§ò‡§ï‡§æ‡§≤‡§ø‡§ï ‡§î‡§∏‡§§",
        'soil_subheader': "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ (ML ‡§Æ‡•â‡§°‡§≤ ‡§∏‡•á ‡§Æ‡•á‡§≤ ‡§ñ‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è)",
        'soil_label': "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç",
        'soil_types': ["‡§ú‡§≤‡•ã‡§¢‡§º", "‡§ï‡§æ‡§≤‡•Ä (‡§∞‡•á‡§ó‡•Å‡§∞)", "‡§≤‡§æ‡§≤ ‡§î‡§∞ ‡§™‡•Ä‡§≤‡•Ä", "‡§≤‡•á‡§ü‡§∞‡§æ‡§á‡§ü", "‡§∂‡•Å‡§∑‡•ç‡§ï (‡§∞‡•á‡§ó‡§ø‡§∏‡•ç‡§§‡§æ‡§®‡•Ä)", "‡§µ‡§® / ‡§™‡§∞‡•ç‡§µ‡§§‡•Ä‡§Ø", "‡§ñ‡§æ‡§∞‡•Ä / ‡§ï‡•ç‡§∑‡§æ‡§∞‡•Ä‡§Ø", "‡§¶‡§≤‡§¶‡§≤‡•Ä / ‡§™‡•Ä‡§ü"],
        'loc_subheader': "‡§∏‡•ç‡§•‡§æ‡§® ‡§°‡•á‡§ü‡§æ (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)",
        'lat_label': "‡§Ö‡§ï‡•ç‡§∑‡§æ‡§Ç‡§∂",
        'lon_label': "‡§¶‡•á‡§∂‡§æ‡§Ç‡§§‡§∞",
        'button_text': "‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§è‡§Å",
        'rec_header': "‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ:",
        'rec_base_text': "‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡•Ä ‡§ó‡§à ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§î‡§∞ ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞, <b>{}</b> ‡§∏‡§¨‡§∏‡•á ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§´‡§∏‡§≤ ‡§π‡•à‡•§",
        'time_subheader': "üóìÔ∏è ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§∏‡§Æ‡§Ø ‡§µ‡§ø‡§µ‡§∞‡§£",
        'sowing_time': "‡§¨‡•Å‡§µ‡§æ‡§à ‡§ï‡§æ ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§∏‡§Æ‡§Ø",
        'duration_time': "‡§Ö‡§µ‡§ß‡§ø ‡§ï‡§æ ‡§∏‡§Æ‡§Ø (‡§≤‡§ó‡§≠‡§ó)",
        'harvest_time': "‡§ï‡§ü‡§æ‡§à ‡§ï‡§æ ‡§∏‡§Æ‡§Ø",
        'note': "‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç: ‡§Ø‡§π ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ‡§°‡•á‡§ü‡§æ‡§∏‡•á‡§ü ‡§î‡§∞ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø/‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§°‡•á‡§ü‡§æ ‡§™‡§∞ ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Æ‡§∂‡•Ä‡§® ‡§≤‡§∞‡•ç‡§®‡§ø‡§Ç‡§ó ‡§Æ‡•â‡§°‡§≤ ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•à‡•§ **ML ‡§Æ‡•â‡§°‡§≤ ‡§ï‡•ã ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§ï‡•ã ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•Å‡§®: ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§**",
        'error_model': "‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: 'model.pkl' ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§Æ‡•â‡§°‡•á‡§≤ ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§®‡•ã‡§ü‡§¨‡•Å‡§ï ‡§ö‡§≤‡§æ‡§è‡§Å‡•§",
        'error_map': "‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: 'Crop_data.csv' ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ø‡§π ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§´‡§º‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à ‡§§‡§æ‡§ï‡§ø ‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡•á‡•§", 
        'error_pred': "‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§µ‡§ø‡§´‡§≤: {}",
        'info_pred': "‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•Ä 'model.pkl' ‡§î‡§∞ 'Crop_data.csv' ‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç ‡§∏‡§π‡•Ä ‡§¢‡§Ç‡§ó ‡§∏‡•á ‡§∏‡•á‡§ü ‡§π‡•à‡§Ç‡•§",
        'unknown_crop': "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ ‡§´‡§∏‡§≤",
        'not_available': "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§°‡•á‡§ü‡§æ ‡§Æ‡•á‡§Ç ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§",
        'live_weather_success': "‚úÖ ‡§≤‡§æ‡§á‡§µ ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•Å‡§Ü! ‡§§‡§æ‡§™‡§Æ‡§æ‡§®: **{temp:.1f}¬∞C** ‡§î‡§∞ ‡§®‡§Æ‡•Ä: **{hum}%**‡•§",
        'live_weather_error': "‚ùå ‡§≤‡§æ‡§á‡§µ ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§æ‡•§ ‡§á‡§∏‡§ï‡•á ‡§¨‡§ú‡§æ‡§Ø ‡§Æ‡•à‡§®‡•Å‡§Ö‡§≤ **{temp:.1f}¬∞C** / **{hum:.0f}%** ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {error}",
        'weather_disabled': "‡§≤‡§æ‡§á‡§µ ‡§Æ‡•å‡§∏‡§Æ ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Å ‡§Ö‡§ï‡•ç‡§∑‡§Æ ‡§π‡•à‡§Ç‡•§",
    },
    '‡§Æ‡§∞‡§æ‡§†‡•Ä (Marathi)': {
        'code': 'Marathi',
        'title': "üå± ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§™‡•Ä‡§ï ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä",
        'intro': "‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§ú‡§Æ‡§ø‡§®‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§™‡•Ä‡§ï ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏ ‡§Æ‡§ø‡§≥‡§µ‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Æ‡§æ‡§§‡•Ä ‡§Ü‡§£‡§ø ‡§π‡§µ‡§æ‡§Æ‡§æ‡§®‡§æ‡§ö‡•á ‡§™‡•Ö‡§∞‡§æ‡§Æ‡•Ä‡§ü‡§∞‡•ç‡§∏ ‡§ñ‡§æ‡§≤‡•Ä ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ‡•§ ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏ ‡§á‡§Ç‡§ú‡§ø‡§® ‡§Ø‡§æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ö‡§æ ‡§µ‡§æ‡§™‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§™‡§ø‡§ï‡§æ‡§ö‡§æ ‡§Ö‡§Ç‡§¶‡§æ‡§ú ‡§≤‡§æ‡§µ‡§§‡•á‡•§",
        'sidebar_header': "‡§Æ‡§æ‡§§‡•Ä ‡§Ü‡§£‡§ø ‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§™‡•Ö‡§∞‡§æ‡§Æ‡•Ä‡§ü‡§∞‡•ç‡§∏",
        'weather_subheader': "‡§•‡•á‡§ü ‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§æ (‡§∏‡•ç‡§µ‡§Ø‡§Ç‡§ö‡§≤‡§ø‡§§)",
        'city_label': "‡§∂‡§π‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ (‡§â‡§¶‡§æ. ‡§™‡•Å‡§£‡•á)",
        'n_label': "‡§®‡§§‡•ç‡§∞ (N) ‡§ï‡§ø‡§ó‡•ç‡§∞‡•Ö/‡§π‡•á‡§ï‡•ç‡§ü‡§∞",
        'p_label': "‡§´‡•â‡§∏‡•ç‡§´‡§∞‡§∏ (P) ‡§ï‡§ø‡§ó‡•ç‡§∞‡•Ö/‡§π‡•á‡§ï‡•ç‡§ü‡§∞",
        'k_label': "‡§™‡•ã‡§ü‡•Ö‡§∂‡§ø‡§Ø‡§Æ (K) ‡§ï‡§ø‡§ó‡•ç‡§∞‡•Ö/‡§π‡•á‡§ï‡•ç‡§ü‡§∞",
        'temp_label': "‡§∏‡§ß‡•ç‡§Ø‡§æ‡§ö‡•á ‡§§‡§æ‡§™‡§Æ‡§æ‡§® (¬∞C)",
        'hum_label': "‡§∏‡§ß‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ (%)",
        'ph_label': "‡§Æ‡§æ‡§§‡•Ä‡§ö‡§æ ‡§™‡•Ä‡§è‡§ö (pH)",
        'rain_label': "‡§™‡§æ‡§ä‡§∏ (‡§Æ‡§ø‡§Æ‡•Ä) - ‡§¶‡•Ä‡§∞‡•ç‡§ò‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§∞‡§æ‡§∏‡§∞‡•Ä",
        'soil_subheader': "‡§Æ‡§æ‡§§‡•Ä‡§ö‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ (ML ‡§Æ‡•â‡§°‡•á‡§≤‡§∂‡•Ä ‡§ú‡•Å‡§≥‡§≤‡§æ ‡§™‡§æ‡§π‡§ø‡§ú‡•á)",
        'soil_label': "‡§Æ‡§æ‡§§‡•Ä‡§ö‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§®‡§ø‡§µ‡§°‡§æ",
        'soil_types': ["‡§ó‡§æ‡§≥‡§æ‡§ö‡•Ä", "‡§ï‡§æ‡§≥‡•Ä (‡§∞‡•á‡§ó‡•Å‡§∞)", "‡§≤‡§æ‡§≤ ‡§Ü‡§£‡§ø ‡§™‡§ø‡§µ‡§≥‡•Ä", "‡§ú‡§æ‡§Ç‡§≠‡§æ", "‡§ï‡•ã‡§∞‡§°‡•Ä (‡§µ‡§æ‡§≥‡§µ‡§Ç‡§ü‡•Ä)", "‡§µ‡§® / ‡§™‡§∞‡•ç‡§µ‡§§‡•Ä‡§Ø", "‡§ñ‡§æ‡§∞‡§ü / ‡§Ö‡§≤‡•ç‡§ï‡§ß‡§∞‡•ç‡§Æ‡•Ä", "‡§¶‡§≤‡§¶‡§≤‡•Ä‡§ö‡§æ / ‡§™‡•Ä‡§ü‡•Ä"],
        'loc_subheader': "‡§∏‡•ç‡§•‡§æ‡§® ‡§°‡•á‡§ü‡§æ (‡§ê‡§ö‡•ç‡§õ‡§ø‡§ï)",
        'lat_label': "‡§Ö‡§ï‡•ç‡§∑‡§æ‡§Ç‡§∂",
        'lon_label': "‡§∞‡•á‡§ñ‡§æ‡§Ç‡§∂",
        'button_text': "‡§™‡•Ä‡§ï ‡§∏‡•Å‡§ö‡§µ‡§æ",
        'rec_header': "‡§∂‡§ø‡§´‡§æ‡§∞‡§∏ ‡§ï‡•á‡§≤‡•á‡§≤‡•á ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§™‡•Ä‡§ï:",
        'rec_base_text': "‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡•á‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§§‡•Ä ‡§Ü‡§£‡§ø ‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä‡§®‡•Å‡§∏‡§æ‡§∞, <b>{}</b> ‡§π‡•á ‡§∏‡§∞‡•ç‡§µ‡§æ‡§§ ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§™‡•Ä‡§ï ‡§Ü‡§π‡•á‡•§",
        'time_subheader': "üóìÔ∏è ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§µ‡•á‡§≥‡•á‡§ö‡§æ ‡§§‡§™‡§∂‡•Ä‡§≤",
        'sowing_time': "‡§™‡•á‡§∞‡§£‡•Ä‡§ö‡•Ä ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§µ‡•á‡§≥",
        'duration_time': "‡§ï‡§æ‡§≤‡§æ‡§µ‡§ß‡•Ä (‡§Ö‡§Ç‡§¶‡§æ‡§ú‡•á)",
        'harvest_time': "‡§ï‡§æ‡§™‡§£‡•Ä‡§ö‡•Ä ‡§µ‡•á‡§≥",
        'note': "‡§ü‡•Ä‡§™: ‡§π‡•Ä ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡•á‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§°‡•á‡§ü‡§æ‡§∏‡•á‡§ü ‡§Ü‡§£‡§ø ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§µ‡•á‡§≥‡•á‡§§‡•Ä‡§≤/‡§°‡§ø‡§´‡•â‡§≤‡•ç‡§ü ‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§°‡•á‡§ü‡§æ‡§µ‡§∞ ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Æ‡§∂‡•Ä‡§® ‡§≤‡§∞‡•ç‡§®‡§ø‡§Ç‡§ó ‡§Æ‡•â‡§°‡•á‡§≤‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§Ü‡§π‡•á‡•§ **ML ‡§Æ‡•â‡§°‡•á‡§≤‡§≤‡§æ ‡§Æ‡§æ‡§§‡•Ä‡§ö‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§µ‡•à‡§∂‡§ø‡§∑‡•ç‡§ü‡•ç‡§Ø ‡§∏‡§Æ‡§æ‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡§∞‡§£‡•á ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§Ü‡§π‡•á‡•§**",
        'error_model': "‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: 'model.pkl' ‡§∏‡§æ‡§™‡§°‡§≤‡•á ‡§®‡§æ‡§π‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§•‡§Æ ‡§Æ‡•â‡§°‡•á‡§≤ ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§®‡•ã‡§ü‡§¨‡•Å‡§ï ‡§ö‡§æ‡§≤‡§µ‡§æ‡•§",
        'error_map': "‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: 'Crop_data.csv' ‡§∏‡§æ‡§™‡§°‡§≤‡•á ‡§®‡§æ‡§π‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•á ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§´‡•ã‡§≤‡•ç‡§°‡§∞‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§ñ‡§æ‡§§‡•ç‡§∞‡•Ä ‡§ï‡§∞‡§æ ‡§ú‡•á‡§£‡•á‡§ï‡§∞‡•Ç‡§® ‡§™‡§ø‡§ï‡§æ‡§ö‡§æ ‡§§‡§™‡§∂‡•Ä‡§≤ ‡§Æ‡§ø‡§≥‡•á‡§≤‡•§", 
        'error_pred': "‡§Ö‡§Ç‡§¶‡§æ‡§ú ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä: {}",
        'info_pred': "‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§æ ‡§ï‡•Ä ‡§§‡•Å‡§Æ‡§ö‡•Ä 'model.pkl' ‡§Ü‡§£‡§ø 'Crop_data.csv' ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§∞‡§ø‡§§‡•ç‡§Ø‡§æ ‡§∏‡•á‡§ü ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ ‡§Ü‡§π‡•á‡§§ ‡§Ø‡§æ‡§ö‡•Ä ‡§ñ‡§æ‡§§‡•ç‡§∞‡•Ä ‡§ï‡§∞‡§æ‡•§",
        'unknown_crop': "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ ‡§™‡•Ä‡§ï",
        'not_available': "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§°‡•á‡§ü‡§æ ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§æ‡§π‡•Ä‡•§",
        'live_weather_success': "‚úÖ ‡§•‡•á‡§ü ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ù‡§æ‡§≤‡§æ! ‡§§‡§æ‡§™‡§Æ‡§æ‡§®: **{temp:.1f}¬∞C** ‡§Ü‡§£‡§ø ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ: **{hum}%**‡•§",
        'live_weather_error': "‚ùå ‡§•‡•á‡§ü ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•ã‡§ä ‡§∂‡§ï‡§≤‡§æ ‡§®‡§æ‡§π‡•Ä‡•§ ‡§§‡•ç‡§Ø‡§æ‡§ê‡§µ‡§ú‡•Ä ‡§Æ‡•à‡§®‡•Å‡§Ö‡§≤ **{temp:.1f}¬∞C** / **{hum:.0f}%** ‡§ö‡§æ ‡§µ‡§æ‡§™‡§∞ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á‡•§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {error}",
        'weather_disabled': "‡§≤‡§æ‡§á‡§µ ‡§Æ‡•å‡§∏‡§Æ ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Å ‡§Ö‡§ï‡•ç‡§∑‡§Æ ‡§Ü‡§π‡•á‡§§‡•§",
    }
}


# --- Language Selection ---
with st.sidebar:
    selected_language = st.selectbox("Select Language | ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ", list(LANGUAGES.keys()), index=0)
    T = LANGUAGES[selected_language] # Translation dictionary for the selected language
    LANG_CODE = T.get('code', 'English') # Get the language code for result translation


# --- OpenWeatherMap API Functions (Current Weather 2.5 - Free Tier) ---
@st.cache_data(ttl=600) 
def get_live_weather(city_name, api_key):
    """Fetches current temperature (Celsius) and humidity (%) from OpenWeatherMap 2.5 API."""
    if not city_name or not api_key:
        return None, None, "City name or API key missing."
        
    try:
        base_url = "http://api.openweathermap.org/data/2.5/weather?"
        complete_url = f"{base_url}q={city_name}&appid={api_key}&units=metric"
        response = requests.get(complete_url)
        data = response.json()

        if response.status_code == 200:
            live_temp = data['main']['temp']
            live_hum = data['main']['humidity']
            return live_temp, live_hum, None
        else:
            error_message = data.get("message", f"API Error (Code {response.status_code}).")
            return None, None, error_message

    except requests.exceptions.RequestException as e:
        return None, None, str(e)
    except Exception as e:
        return None, None, str(e)

# --- Constants and Defaults ---
DEFAULT_LAT = 20.0
DEFAULT_LON = 75.0
DEFAULT_TEMP = 25.0
DEFAULT_HUM = 65.0
DEFAULT_RAINFALL = 150.0

def get_past_weather_simulation():
    return {'rainfall': DEFAULT_RAINFALL}

# --- CROP TIME DETAILS (English Keys for Lookup) ---
CROP_TIME_DETAILS = {
    'Banana': {'Sowing': 'Feb - May or July - Aug (Planting)', 'Duration': '11 - 15 months', 'Harvest': 'Throughout the year'},
    'Chickpea': {'Sowing': 'October - November (Rabi)', 'Duration': '4 - 5 months', 'Harvest': 'March (Spring)'},
    'Mungbean': {'Sowing': 'June - July (Kharif)', 'Duration': '2 - 3 months', 'Harvest': 'September - October (Autumn)'},
    'Apple': {'Sowing': 'Dec - Feb (Dormant season)', 'Duration': 'Perennial (Tree)', 'Harvest': 'July - September'},
    'Cotton': {'Sowing': 'June - September (Kharif)', 'Duration': '5 - 6 months', 'Harvest': 'December - February'},
    'Mothbeans': {'Sowing': 'June - July (Kharif)', 'Duration': '2 - 3 months', 'Harvest': 'September - October (Autumn)'},
    'Grapes': {'Sowing': 'Dec - Jan (Planting)', 'Duration': 'Perennial (Vine)', 'Harvest': 'Feb - May'},
    'Mango': {'Sowing': 'July - August (Planting)', 'Duration': 'Perennial (Tree)', 'Harvest': 'February - June'},
    'Coconut': {'Sowing': 'June - July (Planting)', 'Duration': 'Perennial (Tree)', 'Harvest': 'Year-round (Multiple harvests)'},
    'Jute': {'Sowing': 'March - July (Monsoon)', 'Duration': '4 - 5 months', 'Harvest': 'July - October (Autumn)'},
    'Lentil': {'Sowing': 'October - November (Rabi)', 'Duration': '4 - 5 months', 'Harvest': 'February - April (Spring)'},
    'Blackgram': {'Sowing': 'June - July (Kharif)', 'Duration': '2 - 3 months', 'Harvest': 'September - October (Autumn)'},
    'Coffee': {'Sowing': 'June - July (Monsoon/Main planting)', 'Duration': 'Perennial (Shrub)', 'Harvest': 'November - March (Main Harvest)'},
    'Kidneybeans': {'Sowing': 'Oct - Nov (Rabi) or Feb-Mar (Zaid)', 'Duration': '3 - 5 months', 'Harvest': 'March - May (Spring/Early Summer)'},
    'Maize': {'Sowing': 'June - July (Kharif)', 'Duration': '3 - 4 months', 'Harvest': 'September - October (Autumn)'}
}


# --- 1. Load Model and Crop Mapping ---
@st.cache_resource
def load_assets():
    """Load the trained ML model and create the crop mapping."""
    try:
        model = joblib.load('model.pkl')
    except FileNotFoundError:
        st.error(T['error_model'])
        return None, None
    except Exception as e:
        st.error(f"{T['error_model']}: {e}")
        return None, None

    try:
        df_original = pd.read_csv('Crop_data.csv') 
        le = LabelEncoder()
        le.fit(df_original['Crop'])
        crop_map = dict(zip(le.transform(le.classes_), le.classes_))
        return model, crop_map
    except FileNotFoundError:
        st.error(T['error_map'])
        return model, None
    except Exception as e:
        st.error(f"{T['error_map']}: {e}")
        return model, None

model, crop_map = load_assets()

if model is None or crop_map is None:
    st.stop()


# --- 2. Sidebar Input Setup ---

st.sidebar.header(T['sidebar_header'])

with st.sidebar:
    # --- 2A. Live Weather Inputs ---
    st.subheader(T['weather_subheader'])
    city_name = st.text_input(T['city_label'], key="city_input", value="Pune")
    
    live_temp, live_hum, weather_error = None, None, None

    if OPENWEATHER_API_KEY:
        live_temp, live_hum, weather_error = get_live_weather(city_name, OPENWEATHER_API_KEY)

        if live_temp is not None:
            st.success(T['live_weather_success'].format(temp=live_temp, hum=live_hum))
        else:
            st.warning(T['live_weather_error'].format(error=weather_error, temp=DEFAULT_TEMP, hum=DEFAULT_HUM))
    else:
        st.info(T['weather_disabled'])


# --- 2B. Final Parameter Setup (Using Live Data or Default) ---

final_temp = live_temp if live_temp is not None else DEFAULT_TEMP
final_hum = live_hum if live_hum is not None else DEFAULT_HUM

st.markdown("---")

with st.sidebar:
    st.markdown(f"**Temperature used for ML:** **{final_temp:.1f}¬∞C**")
    st.markdown(f"**Humidity used for ML:** **{final_hum:.0f}%**")
    st.markdown("---")
    
    # Manual Sliders
    st.subheader("Soil Nutrients")
    N = st.slider(T['n_label'], 0, 140, 70, key='N_in')
    P = st.slider(T['p_label'], 0, 150, 45, key='P_in')
    K = st.slider(T['k_label'], 0, 200, 90, key='K_in')
    ph = st.slider(T['ph_label'], 3.5, 9.5, 6.5, key='pH_in')
    
    # Rainfall
    past_data = get_past_weather_simulation() 
    rainfall = st.slider(T['rain_label'], 20.0, 300.0, past_data['rainfall'], key='R_in')
    
    # --- Soil Type Input ---
    st.subheader(T['soil_subheader'])
    soil_types_list = T['soil_types']
    soil_type_selected_display = st.selectbox(T['soil_label'], soil_types_list, key='Soil_Type_in')
    
    soil_type_index = soil_types_list.index(soil_type_selected_display)
    soil_type_english = LANGUAGES['English']['soil_types'][soil_type_index]
    
    # Lat/Lon are optional
    st.subheader(T['loc_subheader'])
    latitude = st.slider(T['lat_label'], 10.0, 30.0, DEFAULT_LAT, step=0.0001, format="%.4f", key='lat')
    longitude = st.slider(T['lon_label'], 70.0, 80.0, DEFAULT_LON, step=0.0001, format="%.4f", key='lon')


# --- 3. Main UI and Prediction ---
st.title(T['title'])
st.markdown(T['intro'])
st.markdown("---")

if st.button(T['button_text']):
    
    # --- Soil Type Encoding Logic ---
    soil_type_map = {
        "Alluvial": 1, 
        "Black (Regur)": 2, 
        "Red & Yellow": 3, 
        "Laterite": 4, 
        "Arid (Desert)": 5, 
        "Forest / Mountain": 6, 
        "Saline / Alkaline": 7, 
        "Peaty / Marshy": 8
    }
    
    soil_type_encoded = soil_type_map.get(soil_type_english, 0)
    
    # --- Input Data for ML (10 features) ---
    input_data = pd.DataFrame([[N, P, K, final_temp, final_hum, ph, rainfall, latitude, longitude, soil_type_encoded]],
                              columns=['N', 'P', 'K', 'Temperature', 'Humidity', 'pH', 'Rainfall', 'Latitude', 'Longitude', 'Soil_Type_Encoded'])
    
    try:
        prediction_encoded = model.predict(input_data)[0]
        
        # Predicted crop name in ENGLISH (from the ML model/crop_map)
        predicted_crop_english = crop_map.get(prediction_encoded, 'Unknown Crop')

        # --- DYNAMIC TRANSLATION LOGIC (FIX FOR CROP NAME) ---
        if LANG_CODE != 'English' and predicted_crop_english in CROP_NAME_TRANSLATIONS:
            predicted_crop_display = CROP_NAME_TRANSLATIONS[predicted_crop_english].get(LANG_CODE, predicted_crop_english)
        else:
            predicted_crop_display = predicted_crop_english
        
        
        # Retrieve the added time details (English keys for lookup)
        crop_details_english_keys = CROP_TIME_DETAILS.get(predicted_crop_english, {
            'Sowing': 'Not available in current data.',
            'Duration': 'Not available in current data.',
            'Harvest': 'Not available in current data.'
        })
        
        # --- DYNAMIC TRANSLATION LOGIC (FIX FOR TIME DETAILS) ---
        crop_details = {}
        for key, english_value in crop_details_english_keys.items():
            if LANG_CODE != 'English' and english_value in TIME_DETAILS_TRANSLATIONS:
                # Look up the translation for the time string
                translated_value = TIME_DETAILS_TRANSLATIONS[english_value].get(LANG_CODE, english_value)
            else:
                # Use the English value if no translation or language is English
                translated_value = english_value
            
            crop_details[key] = translated_value
        
        # Handle case where the prediction failed or details are missing
        if 'Unknown Crop' in predicted_crop_english:
             crop_details = {k: T['not_available'] for k in ['Sowing', 'Duration', 'Harvest']}


        # Custom CSS for the colored cards/boxes
        st.markdown("""
        <style>
        .prediction-box {
            background-color: #e0f7fa; 
            padding: 20px; 
            border-radius: 10px; 
            text-align: center;
            margin-bottom: 20px;
        }
        .time-card {
            background-color: #f1f8e9; 
            padding: 15px; 
            border-radius: 8px; 
            height: 100%;
            border-left: 5px solid #689f38;
        }
        .time-card h4 {
            color: #33691e;
            margin-top: 0;
            margin-bottom: 5px;
        }
        .time-card p {
            font-size: 16px;
            font-weight: 500;
            color: #212121;
        }
        </style>
        """, unsafe_allow_html=True)


        # 1. Main Recommendation Box
        st.markdown(f"""
            <div class="prediction-box">
                <h2>{T['rec_header']}</h2>
                <p style="font-size:36px;font-weight:700;color:#004d40;">{predicted_crop_display.upper()}</p>
                <p>{T['rec_base_text'].format(f'<b style="color:#008080;">{predicted_crop_display.upper()}</b>')}</p>
            </div>
        """, unsafe_allow_html=True)

        # 2. Time Details Section (Content is now translated)
        st.subheader(T['time_subheader'])
        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown(f"""
            <div class="time-card">
                <h4>{T['sowing_time']}</h4>
                <p>{crop_details['Sowing']}</p>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown(f"""
            <div class="time-card">
                <h4>{T['duration_time']}</h4>
                <p>{crop_details['Duration']}</p>
            </div>
            """, unsafe_allow_html=True)

        with col3:
            st.markdown(f"""
            <div class="time-card">
                <h4>{T['harvest_time']}</h4>
            <p>{crop_details['Harvest']}</p>
            </div>
            """, unsafe_allow_html=True)

    except Exception as e:
        st.error(T['error_pred'].format(e))
        st.info(T['info_pred'])

st.markdown("---")
st.caption(T['note'])